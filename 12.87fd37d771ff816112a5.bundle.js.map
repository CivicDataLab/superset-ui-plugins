{"version":3,"file":"12.87fd37d771ff816112a5.bundle.js","sources":["webpack:////Users/krist_wongsuphasawat/workspace/superset-ui-legacy/node_modules/d3-svg-legend/src/legend.js"],"sourcesContent":["module.exports = {\n\n  d3_identity: function (d) {\n    return d;\n  },\n\n  d3_mergeLabels: function (gen, labels) {\n\n      if(labels.length === 0) return gen;\n\n      gen = (gen) ? gen : [];\n\n      var i = labels.length;\n      for (; i < gen.length; i++) {\n        labels.push(gen[i]);\n      }\n      return labels;\n    },\n\n  d3_linearLegend: function (scale, cells, labelFormat) {\n    var data = [];\n\n    if (cells.length > 1){\n      data = cells;\n\n    } else {\n      var domain = scale.domain(),\n      increment = (domain[domain.length - 1] - domain[0])/(cells - 1),\n      i = 0;\n\n      for (; i < cells; i++){\n        data.push(domain[0] + i*increment);\n      }\n    }\n\n    var labels = data.map(labelFormat);\n\n    return {data: data,\n            labels: labels,\n            feature: function(d){ return scale(d); }};\n  },\n\n  d3_quantLegend: function (scale, labelFormat, labelDelimiter) {\n    var labels = scale.range().map(function(d){\n      var invert = scale.invertExtent(d),\n      a = labelFormat(invert[0]),\n      b = labelFormat(invert[1]);\n\n      // if (( (a) && (a.isNan()) && b){\n      //   console.log(\"in initial statement\")\n        return labelFormat(invert[0]) + \" \" + labelDelimiter + \" \" + labelFormat(invert[1]);\n      // } else if (a || b) {\n      //   console.log('in else statement')\n      //   return (a) ? a : b;\n      // }\n\n    });\n\n    return {data: scale.range(),\n            labels: labels,\n            feature: this.d3_identity\n          };\n  },\n\n  d3_ordinalLegend: function (scale) {\n    return {data: scale.domain(),\n            labels: scale.domain(),\n            feature: function(d){ return scale(d); }};\n  },\n\n  d3_drawShapes: function (shape, shapes, shapeHeight, shapeWidth, shapeRadius, path) {\n    if (shape === \"rect\"){\n        shapes.attr(\"height\", shapeHeight).attr(\"width\", shapeWidth);\n\n    } else if (shape === \"circle\") {\n        shapes.attr(\"r\", shapeRadius)//.attr(\"cx\", shapeRadius).attr(\"cy\", shapeRadius);\n\n    } else if (shape === \"line\") {\n        shapes.attr(\"x1\", 0).attr(\"x2\", shapeWidth).attr(\"y1\", 0).attr(\"y2\", 0);\n\n    } else if (shape === \"path\") {\n      shapes.attr(\"d\", path);\n    }\n  },\n\n  d3_addText: function (svg, enter, labels, classPrefix){\n    enter.append(\"text\").attr(\"class\", classPrefix + \"label\");\n    svg.selectAll(\"g.\" + classPrefix + \"cell text.\" + classPrefix + \"label\")\n      .data(labels).text(this.d3_identity);\n  },\n\n  d3_calcType: function (scale, ascending, cells, labels, labelFormat, labelDelimiter){\n    var type = scale.ticks ?\n            this.d3_linearLegend(scale, cells, labelFormat) : scale.invertExtent ?\n            this.d3_quantLegend(scale, labelFormat, labelDelimiter) : this.d3_ordinalLegend(scale);\n\n    type.labels = this.d3_mergeLabels(type.labels, labels);\n\n    if (ascending) {\n      type.labels = this.d3_reverse(type.labels);\n      type.data = this.d3_reverse(type.data);\n    }\n\n    return type;\n  },\n\n  d3_reverse: function(arr) {\n    var mirror = [];\n    for (var i = 0, l = arr.length; i < l; i++) {\n      mirror[i] = arr[l-i-1];\n    }\n    return mirror;\n  },\n\n  d3_placement: function (orient, cell, cellTrans, text, textTrans, labelAlign) {\n    cell.attr(\"transform\", cellTrans);\n    text.attr(\"transform\", textTrans);\n    if (orient === \"horizontal\"){\n      text.style(\"text-anchor\", labelAlign);\n    }\n  },\n\n  d3_addEvents: function(cells, dispatcher){\n    var _ = this;\n\n      cells.on(\"mouseover.legend\", function (d) { _.d3_cellOver(dispatcher, d, this); })\n          .on(\"mouseout.legend\", function (d) { _.d3_cellOut(dispatcher, d, this); })\n          .on(\"click.legend\", function (d) { _.d3_cellClick(dispatcher, d, this); });\n  },\n\n  d3_cellOver: function(cellDispatcher, d, obj){\n    cellDispatcher.cellover.call(obj, d);\n  },\n\n  d3_cellOut: function(cellDispatcher, d, obj){\n    cellDispatcher.cellout.call(obj, d);\n  },\n\n  d3_cellClick: function(cellDispatcher, d, obj){\n    cellDispatcher.cellclick.call(obj, d);\n  },\n\n  d3_title: function(svg, cellsSvg, title, classPrefix){\n    if (title !== \"\"){\n\n      var titleText = svg.selectAll('text.' + classPrefix + 'legendTitle');\n\n      titleText.data([title])\n        .enter()\n        .append('text')\n        .attr('class', classPrefix + 'legendTitle');\n\n        svg.selectAll('text.' + classPrefix + 'legendTitle')\n            .text(title)\n\n      var yOffset = svg.select('.' + classPrefix + 'legendTitle')\n          .map(function(d) { return d[0].getBBox().height})[0],\n      xOffset = -cellsSvg.map(function(d) { return d[0].getBBox().x})[0];\n\n      cellsSvg.attr('transform', 'translate(' + xOffset + ',' + (yOffset + 10) + ')');\n\n    }\n  }\n}\n"],"mappings":"AAAA","sourceRoot":""}
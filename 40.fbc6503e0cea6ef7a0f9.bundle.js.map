{"version":3,"file":"40.fbc6503e0cea6ef7a0f9.bundle.js","sources":["webpack:///../superset-ui-preset-chart-xy/src/Line/Line.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable sort-keys, no-magic-numbers, complexity */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { LineSeries, XYChart } from '@data-ui/xy-chart';\nimport { themeShape } from '@data-ui/xy-chart/esm/utils/propShapes';\nimport { chartTheme } from '@data-ui/theme';\nimport { CategoricalColorNamespace } from '@superset-ui/color';\nimport createTooltip from './createTooltip';\nimport renderLegend from '../utils/renderLegend';\nimport XYChartLayout from '../utils/XYChartLayout';\nimport WithLegend from '../components/WithLegend';\n\nchartTheme.gridStyles.stroke = '#f1f3f5';\n\nconst propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string,\n      values: PropTypes.arrayOf(PropTypes.number),\n    }),\n  ).isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  margin: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    bottom: PropTypes.number,\n    right: PropTypes.number,\n  }),\n  encoding: PropTypes.shape({\n    x: PropTypes.object,\n    y: PropTypes.object,\n    color: PropTypes.object,\n  }).isRequired,\n  theme: themeShape,\n};\n\nconst defaultProps = {\n  className: '',\n  margin: { top: 10, right: 10, left: 10, bottom: 10 },\n  theme: chartTheme,\n};\n\nclass LineChart extends React.PureComponent {\n  renderChart({ width, height }) {\n    const { data, encoding, margin, theme } = this.props;\n\n    const config = {\n      width,\n      height,\n      minContentWidth: 0,\n      minContentHeight: 0,\n      margin,\n      theme,\n      encoding,\n    };\n\n    const colorFn = CategoricalColorNamespace.getScale(\n      encoding.color.scale.scheme,\n      encoding.color.scale.namespace,\n    );\n\n    const colorAccessor = encoding.color.accessor;\n\n    const children = data.map(series => (\n      <LineSeries\n        key={series.key.join('/')}\n        animated\n        data={series.values}\n        stroke={colorFn(colorAccessor(series))}\n        strokeWidth={1.5}\n      />\n    ));\n\n    const layout = new XYChartLayout({ ...config, children });\n\n    return layout.createChartWithFrame(dim => (\n      <XYChart\n        width={dim.width}\n        height={dim.height}\n        ariaLabel=\"BoxPlot\"\n        margin={layout.margin}\n        renderTooltip={createTooltip(encoding.y.axis.tickFormat)}\n        showYGrid\n        // snapTooltipToDataX\n        theme={config.theme}\n        xScale={config.encoding.x.scale}\n        yScale={config.encoding.y.scale}\n      >\n        {children}\n        {layout.createXAxis()}\n        {layout.createYAxis()}\n      </XYChart>\n    ));\n  }\n\n  render() {\n    const { className, data, width, height, encoding } = this.props;\n\n    return (\n      <WithLegend\n        className={`superset-chart-line ${className}`}\n        width={width}\n        height={height}\n        position=\"top\"\n        renderLegend={() => renderLegend(data, encoding.color)}\n        renderChart={parent => this.renderChart(parent)}\n        hideLegend={!encoding.color.legend}\n      />\n    );\n  }\n}\n\nLineChart.propTypes = propTypes;\nLineChart.defaultProps = defaultProps;\n\nexport default LineChart;\n"],"mappings":"AA8BA","sourceRoot":""}
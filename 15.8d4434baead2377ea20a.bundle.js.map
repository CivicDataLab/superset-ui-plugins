{"version":3,"file":"15.8d4434baead2377ea20a.bundle.js","sources":["webpack:///../superset-ui-legacy-plugin-chart-sunburst/lib/Sunburst.js"],"sourcesContent":["\"use strict\";exports.__esModule=!0,exports.default=void 0;var _d=_interopRequireDefault(require(\"d3\")),_propTypes=_interopRequireDefault(require(\"prop-types\")),_color=require(\"@superset-ui/color\"),_numberFormat=require(\"@superset-ui/number-format\"),_wrapSvgText=_interopRequireDefault(require(\"./utils/wrapSvgText\"));require(\"./Sunburst.css\");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */ /* eslint-disable no-param-reassign, sort-keys, no-magic-numbers */ /* eslint-disable complexity, no-plusplus, no-continue, babel/no-invalid-this */var propTypes={// Each row is an array of [hierarchy-lvl1, hierarchy-lvl2, metric1, metric2]\n// hierarchy-lvls are string. metrics are number\ndata:_propTypes.default.arrayOf(_propTypes.default.array),width:_propTypes.default.number,height:_propTypes.default.number,colorScheme:_propTypes.default.string,metrics:_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string,_propTypes.default.object]))};function metricLabel(a){return\"string\"==typeof a||a instanceof String?a:a.label}// Given a node in a partition layout, return an array of all of its ancestor\n// nodes, highest first, but excluding the root.\nfunction getAncestors(a){for(var b=[],c=a;c.parent;)b.unshift(c),c=c.parent;return b}// Modified from http://bl.ocks.org/kerryrodden/7090426\nfunction Sunburst(a,b){var j=Math.sqrt;function c(a){// -2 bc row contains 2x metrics, +extra for %label and buffer\nl=a.length-2+1,m={width:C/l,height:.8*B,// more margin\nspacing:3,tipTailWidth:10},p=L.append(\"svg:g\").attr(\"class\",\"breadcrumbs\").attr(\"transform\",\"translate(\"+y.left+\",\"+y.top+\")\"),p.append(\"svg:text\").attr(\"class\",\"end-label\")}// Generate a string that describes the points of a breadcrumb polygon.\nfunction d(a,b){var c=[];return c.push(\"0,0\"),c.push(m.width+\",0\"),c.push(m.width+m.tipTailWidth+\",\"+m.height/2),c.push(m.width+\",\"+m.height),c.push(\"0,\"+m.height),0<b&&c.push(m.tipTailWidth+\",\"+m.height/2),c.join(\" \")}function e(a,b){var c=p.selectAll(\"g\").data(a,function(a){return a.name+a.depth}),e=c.enter().append(\"svg:g\");// Add breadcrumb and label for entering nodes.\n// Set position for entering and updating nodes.\n// Remove exiting nodes.\n// Now move and update the percentage at the end.\n// Make the breadcrumb trail visible, if it's hidden.\ne.append(\"svg:polygon\").attr(\"points\",d).style(\"fill\",function(a){return F?G(a.name):o(a.m2/a.m1)}),e.append(\"svg:text\").attr(\"x\",(m.width+m.tipTailWidth)/2).attr(\"y\",m.height/4).attr(\"dy\",\"0.85em\").style(\"fill\",function(a){// Make text white or black based on the lightness of the background\nvar b=_d.default.hsl(F?G(a.name):o(a.m2/a.m1));return .5>b.l?\"white\":\"black\"}).attr(\"class\",\"step-label\").text(function(a){return a.name.replace(/_/g,\" \")}).call(_wrapSvgText.default,m.width,m.height/2),c.attr(\"transform\",function(a,b){return\"translate(\"+b*(m.width+m.spacing)+\", 0)\"}),c.exit().remove(),p.select(\".end-label\").attr(\"x\",(a.length+.5)*(m.width+m.spacing)).attr(\"y\",m.height/2).attr(\"dy\",\"0.35em\").text(b),p.style(\"visibility\",null)}// Fade all but the current sequence, and show it in the breadcrumb trail.\nfunction f(a){var b=getAncestors(a),c=b[b.length-2]||null,d=(a.m1/n).toPrecision(3),f=c?(a.m1/c.m1).toPrecision(3):null,g=K(d),h=c?K(f):\"\",i=[\"-25\",\"7\",\"35\",\"60\"],j=0,k=1e-5>Math.abs(a.m1-a.m2);// Reset and fade all the segments.\n// Then highlight only those that are an ancestor of the current segment.\ns.selectAll(\"*\").remove(),s.append(\"text\").attr(\"class\",\"path-abs-percent\").attr(\"y\",i[j++]).text(g+\" of total\"),h&&s.append(\"text\").attr(\"class\",\"path-cond-percent\").attr(\"y\",i[j++]).text(h+\" of parent\"),s.append(\"text\").attr(\"class\",\"path-metrics\").attr(\"y\",i[j++]).text(metricLabel(x[0])+\": \"+J(a.m1)+(k?\"\":\", \"+metricLabel(x[1])+\": \"+J(a.m2))),s.append(\"text\").attr(\"class\",\"path-ratio\").attr(\"y\",i[j++]).text(k?\"\":metricLabel(x[1])+\"/\"+metricLabel(x[0])+\": \"+K(a.m2/a.m1)),r.selectAll(\"path\").style(\"stroke-width\",null).style(\"stroke\",null).style(\"opacity\",.3),r.selectAll(\"path\").filter(function(a){return 0<=b.indexOf(a)}).style(\"opacity\",1).style(\"stroke\",\"#aaa\"),e(b,g)}// Restore everything to full opacity when moving off the visualization.\nfunction g(){// Hide the breadcrumb trail\n// Deactivate all segments during transition.\n// Transition each segment to full opacity and then reactivate it.\np.style(\"visibility\",\"hidden\"),s.selectAll(\"*\").remove(),r.selectAll(\"path\").on(\"mouseenter\",null),r.selectAll(\"path\").transition().duration(200).style(\"opacity\",1).style(\"stroke\",null).style(\"stroke-width\",null).each(\"end\",function(){_d.default.select(this).on(\"mouseenter\",f)})}function h(a){var c=Number.isNaN;function b(a){if(a.children){for(var c,d=0,e=0,f=0;f<a.children.length;f++)c=b(a.children[f]),d+=c[0],e+=c[1];a.m1=d,a.m2=e}return[a.m1,a.m2]}// each record [groupby1val, groupby2val, (<string> or 0)n, m1, m2]\nfor(var d={name:\"root\",children:[]},e=0;e<a.length;e++){var f=a[e],g=+f[f.length-2],h=+f[f.length-1],j=f.slice(0,f.length-2);if(!c(g))// e.g. if this is a header row\nfor(var l=d,m=0;m<j.length;m++){var n=l.children||[],o=j[m].toString(),p=m>=j.length-1||0===j[m+1],q=void 0,r=void 0;if(!p){// Not yet at the end of the sequence; move down the tree.\nfor(var s=!1,t=0;t<n.length;t++)if(r=n[t],r.name===o&&r.level===m){q=r,s=!0;break}// If we don't already have a child node for this branch, create it.\ns||(q={name:o,children:[],level:m},n.push(q)),l=q}else 0!==o&&(// Reached the end of the sequence; create a leaf node.\nq={name:o,m1:g,m2:h},n.push(q))}}return b(d),d}// Main function to draw and set up the visualization, once we have the data.\nfunction i(a){var b=h(a);q=L.append(\"svg:g\").attr(\"class\",\"sunburst-vis\").attr(\"transform\",\"translate(\"+(y.left+C/2+\",\")+(\"\"+(y.top+B+D/2))+\")\").on(\"mouseleave\",g),r=q.append(\"svg:g\").attr(\"id\",\"arcs\"),s=q.append(\"svg:g\").attr(\"class\",\"center-label\"),r.append(\"svg:circle\").attr(\"r\",E).style(\"opacity\",0);// For efficiency, filter nodes to keep only those large enough to see.\nvar c,d=H.nodes(b).filter(function(a){return .005<a.dx});// 0.005 radians = 0.29 degrees\n// Get total size of the tree = value of root node from partition.\nx[0]!==x[1]&&x[1]&&(F=!1,c=_d.default.extent(d,function(a){return a.m2/a.m1}),o=_d.default.scale.linear().domain([c[0],c[0]+(c[1]-c[0])/2,c[1]]).range([\"#00D1C1\",\"white\",\"#FFB400\"])),r.selectAll(\"path\").data(d).enter().append(\"svg:path\").attr(\"display\",function(a){return a.depth?null:\"none\"}).attr(\"d\",I).attr(\"fill-rule\",\"evenodd\").style(\"fill\",function(a){return F?G(a.name):o(a.m2/a.m1)}).style(\"opacity\",1).on(\"mouseenter\",f),n=b.value}var k=_d.default.select(a);k.classed(\"superset-legacy-chart-sunburst\",!0);var l,m,n,o,p,q,r,s,t=b.data,u=b.width,v=b.height,w=b.colorScheme,x=b.metrics,y={top:10,right:5,bottom:10,left:5},z=u,A=v,B=.085*A,C=z-y.left-y.right,D=A-y.top-y.bottom-B,E=Math.min(C,D)/2,F=!0,G=_color.CategoricalColorNamespace.getScale(w),H=_d.default.layout.partition().size([2*Math.PI,E*E]).value(function(a){return a.m1}),I=_d.default.svg.arc().startAngle(function(a){return a.x}).endAngle(function(a){return a.x+a.dx}).innerRadius(function(a){return j(a.y)}).outerRadius(function(a){return j(a.y+a.dy)}),J=(0,_numberFormat.getNumberFormatter)(_numberFormat.NumberFormats.SI_3_DIGIT),K=(0,_numberFormat.getNumberFormatter)(_numberFormat.NumberFormats.PERCENT_3_POINT);// vars with shared scope within this function\nk.select(\"svg\").remove();var L=k.append(\"svg:svg\").attr(\"width\",z).attr(\"height\",A);c(t[0]),i(t)}Sunburst.displayName=\"Sunburst\",Sunburst.propTypes=propTypes;var _default=Sunburst;exports.default=_default;"],"mappings":"AAAA","sourceRoot":""}